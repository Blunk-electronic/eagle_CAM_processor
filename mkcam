#! /bin/bash

# ------------------------------------------------------------------------------
# --         Copyright (C) 2019 Mario Blunk, Blunk electronic                 --
# --                                                                          --
# --    This program is free software: you can redistribute it and/or modify  --
# --    it under the terms of the GNU General Public License as published by  --
# --    the Free Software Foundation, either version 3 of the License, or     --
# --    (at your option) any later version.                                   --
# --                                                                          --
# --    This program is distributed in the hope that it will be useful,       --
# --    but WITHOUT ANY WARRANTY; without even the implied warranty of        --
# --    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         --
# --    GNU General Public License for more details.                          --
# --                                                                          --
# --    You should have received a copy of the GNU General Public License     --
# --    along with this program.  If not, see <http://www.gnu.org/licenses/>. --
# ------------------------------------------------------------------------------

# For correct displaying set tab width in your editor to 4.

# The two letters "CS" indicate a "construction side" where things are not
# finished yet or intended for the future.

# Please send your questions and comments to:
# info@blunk-electronic.de
# or visit <http://www.blunk-electronic.de> for more.


# IMPORTANT: 
# 1. This script runs on UNIX/Linux only.
# 2. This script requires some ULPs on your machine. See NOTES below.
# 3. Make sure your EAGLE searches ULPs in the right directories 
#    (control panel/options/directories/User Language Programs)

# TO DO !
# - handle assembly variants
# - scale layout so that it fits on a A4 sheet
# hints: 
# - eagle -X -s 0.5 -u -N -d PS -o test.ps
# - eagle -X -s $cam_paper_size -u -N -d PS -o test.ps
# - eagle -X -A $asm_variant

# history of changes:
# 
# 
# 

set -e

echo "CAM file generator version 021"
echo "written by Mario Blunk / Blunk electronic / mario.blunk@blunk-electronic.de"

cad_cam_dir=CAD_CAM
gerber_format=GERBER_RS274X
drill_format=EXCELLON

make_date=$(date "+%Y-%m-%d_%H%M%S") # like 2019-01-30_045533
make_date="_DATE_"$make_date

current_directory=`pwd`

board_name=$1
#asm_variant=$2
layer_ct=$2

scale_layout=1
if [ "$#" -eq 3 ]; then
   # echo "Illegal number of parameters"
	scale_layout=$3
fi


echo
echo "board file given : "$board_name
echo "layer count      : "$layer_ct
# echo "scale layout     : "$scale_layout
echo
echo "WARNING: CAM FILES WILL BE GENERATED BASED ON THE ASSEMBLY VARIANT THE BOARD WAS SAVED WITH LAST !"
echo -n "proceed ? (y/n) "
read key
echo
[ ! $key = "y" ] && 
	{
	echo "mkcam aborted by operator"
	exit 1
	}

# make sure the given board file does exist
[ ! -e $board_name ] &&
	{
	echo "ERROR: Board file '"$board_name"' does not exist !"
	exit 1
	}
	
# make short board name without extension ".brd"
board_name_short=${board_name:0:-4}

# make sure there is a schematic belonging to the board file
schematic_name=$board_name_short.sch
[ ! -e $schematic_name ] &&
	{
	echo "ERROR: Schematic file '"$schematic_name"' does not exist !"
	exit 1
	}

# copy schematic_name_short from board_name_short (without extension, both names are equal)
schematic_name_short=$board_name_short 	

# make sure the cad/cam directory exists
[ ! -e $cad_cam_dir ] && 
	{
	echo "WARNING : Directory '"$cad_cam_dir"' not found !"
	echo -n "create and proceed ? (y/n) "
	read key
	echo
	[ ! $key = "y" ] && 
		{
		echo "mkcam aborted by operator"
		exit 1
		}
	mkdir $cad_cam_dir
	}

	
# build name of target directory
target_directory=$(echo $cad_cam_dir/$board_name_short"_"$make_date)

# in case the target directory gets created at the same minute again, remove the existing one
[ -e $target_directory ] && 
	{
	echo "Target directory '"$target_directory"' already exists, removing old one ..."
	rm -rf $target_directory
	}

# make target directory
mkdir $target_directory

# extend target directory by CAM
target_directory=$target_directory"/CAM"
mkdir $target_directory

# make gerber & drill sub directory
cam_dir=$gerber_format"__"$drill_format
mkdir $target_directory/$cam_dir

# make pdf sub directory
mkdir $target_directory/pdf

echo "generating CAM files in directory '"$target_directory"' ..."

content_file=$target_directory/$cam_dir/legend.txt
echo "CAM files legend           " > $content_file
echo >> $content_file
echo "Layer                         File" >> $content_file
echo "-------------------------------------------------------------------------------" >> $content_file

#ps_parameters=$(echo "-X -s "$scale_layout" -x 0.1 -y 0.2 -u -N -d PS -o")
#ps_parameters=$(echo "-X -s "$scale_layout" -w 12.5 -h 8.5 -u -N -d PS -o") # page width 12 inch / page height 8 inch
ps_parameters=$(echo "-X -s "$scale_layout" -u -N -d PS -o")
file_count=0

echo -n "- layer 1 (top) ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_top_1.cmp" $board_name top via pad tCopper > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Cu Layer 1 (top)             " $board_name_short"_cu_layer_1.cmp" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/01_board_ly01.ps $board_name top via pad tCopper dimension document > /dev/null

echo

[ $layer_ct -ge 4 ] &&
	{
	echo -n "- layer 2 ..."
	eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_2.ly2" $board_name 2 via pad > /dev/null
	
	file_count=$[file_count+1] # count CAM files
	# update legend
	echo "Cu Layer 2                   " $board_name_short"_cu_layer_2.ly2" >> $content_file
	# make a ps file of this layer
	eagle $ps_parameters $target_directory/pdf/02_board_ly02.ps $board_name 2 via pad dimension document > /dev/null
	
	echo

	[ $layer_ct -ge 6 ] &&
		{
		echo -n "- layer 3 ..."
		eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_3.ly3" $board_name 3 via pad > /dev/null
		
		file_count=$[file_count+1] # count CAM files
		# update legend
		echo "Cu Layer 3                   " $board_name_short"_cu_layer_3.ly3" >> $content_file
		# make a ps file of this layer
		eagle $ps_parameters $target_directory/pdf/03_board_ly03.ps $board_name 3 via pad dimension document > /dev/null
		
		echo
		
		echo -n "- layer 14 ..."
		eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_14.ly14" $board_name 14 via pad > /dev/null
		
		file_count=$[file_count+1] # count CAM files
		# update legend
		echo "Cu Layer 14                  " $board_name_short"_cu_layer_14.ly14" >> $content_file
		# make a ps file of this layer
		eagle $ps_parameters $target_directory/pdf/14_board_ly14.ps $board_name 14 via pad dimension document > /dev/null
		
		echo
		}
		
	echo -n "- layer 15 ..."
	eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_15.ly15" $board_name 15 via pad > /dev/null
	
	file_count=$[file_count+1] # count CAM files
	# update legend
	echo "Cu Layer 15                  " $board_name_short"_cu_layer_15.ly15" >> $content_file
	# make a ps file of this layer
	eagle $ps_parameters $target_directory/pdf/15_board_ly15.ps $board_name 15 via pad dimension document > /dev/null
	
	echo
	}

echo -n "- layer 16 (bottom) ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cu_layer_bot_16.sol" $board_name bot via pad bCopper > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Cu Layer 16 (bot)            " $board_name_short"_cu_layer_16.sol" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/16_board_ly16.ps $board_name bot via pad bCopper dimension document > /dev/null

echo

echo -n "- silk screen ..."
#top
#eagle -X -A $asm_variant
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_silk_screen_top.plc" $board_name tplace tnames > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Silk Screen Top              " $board_name_short"_silk_screen_top.plc" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/17_board_silk_screen_top_plc.ps $board_name tplace tnames dimension document > /dev/null

#bot
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_silk_screen_bot.pls" $board_name bplace bnames > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Silk Screen Bottom           " $board_name_short"_silk_screen_bot.pls" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/18_board_silk_screen_bot_mirrored_pls.ps $board_name bplace bnames dimension document > /dev/null

echo

echo -n "- stop mask ..."
#top
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_solder_stop_top.stc" $board_name tstop > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Solder Stop Mask Top         " $board_name_short"_solder_stop_top.stc" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/19_board_solder_stop_top_stc.ps $board_name tstop dimension document > /dev/null

#bot
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_solder_stop_bot.sts" $board_name bstop > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Solder Stop Mask Bottom      " $board_name_short"_solder_stop_bot.sts" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/20_board_solder_stop_bot_mirrored_sts.ps $board_name bstop dimension document > /dev/null

echo

echo -n "- cream mask ..."
#top
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cream_top.crc" $board_name tcream > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Solder Cream Top             " $board_name_short"_cream_top.crc" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/21_board_cream_top_crc.ps $board_name tcream dimension document > /dev/null

#bot
eagle -X  -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_cream_bot.crs" $board_name bcream > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Solder Cream Bottom          " $board_name_short"_cream_bot.crs" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/22_board_cream_bot_mirrored_crs.ps $board_name bcream dimension document > /dev/null

echo

echo -n "- drills ..."
#plated
#eagle -X -d $drill_format -o $target_directory/$cam_dir/$board_name_short"_drills_plated.drp" $board_name drills > /dev/null
eagle -X -d $drill_format -o $target_directory/$cam_dir/$board_name_short"_drills_plated.%L.drp" $board_name drills > /dev/null
# If only one drill file has been generated, its extension is headed by two periods (.).
if [ -e $target_directory/$cam_dir/$board_name_short"_drills_plated..drp" ] 
	then
		# rename the single drill file so that it has only one period (.) before the extension:
		mv $target_directory/$cam_dir/$board_name_short"_drills_plated..drp" $target_directory/$cam_dir/$board_name_short"_drills_plated.drp"
		
		file_count=$[file_count+1] # count CAM files

		# update legend
		echo "Drills Plated                " $board_name_short"_drills_plated.drp" >> $content_file
		# make a ps file of this layer
		eagle $ps_parameters $target_directory/pdf/23_board_drills_plated_drp.ps $board_name drills dimension document > /dev/null
	
	else
		# count drill files:
		#plated_drill_file_count=$(ls $target_directory/$cam_dir/$board_name_short"_drills_plated.drp".???? | wc -l)
		plated_drill_file_count=$(ls $target_directory/$cam_dir/$board_name_short"_drills_plated".????.drp | wc -l)
		echo >> $content_file
		#echo "WARNING: $plated_drill_file_count drill files *.drp.xxxx for each via type created !" >> $content_file
		echo "WARNING: $plated_drill_file_count drill files $board_name_short"_drills_plated.xxxx.drp" for each via type created !" >> $content_file
		file_count=$[file_count + plated_drill_file_count] # count CAM files
		echo >> $content_file
		
		# CS list them in the legend
fi



#non-plated
eagle -X -d $drill_format -o $target_directory/$cam_dir/$board_name_short"_drills_non_plated.drn" $board_name holes > /dev/null

# non-plated drills are not always there. so if file created:
[ -e $target_directory/$cam_dir/$board_name_short"_drills_non_plated.drn" ] && 
	{
	file_count=$[file_count+1] # count CAM files
	# update legend
	echo "Drills Non-Plated            " $board_name_short"_drills_non_plated.drn" >> $content_file
	# make a ps file of this layer
	eagle $ps_parameters $target_directory/pdf/24_board_drills_non_plated_drn.ps $board_name holes dimension document > /dev/null
	
	}
echo

echo -n "- plated millings ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_millings_plated.mil" $board_name milling > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Millings Plated              " $board_name_short"_millings_plated.mil" >> $content_file
# make a ps file of this layer
# having the dimension layer enabled may cause confusing of board dimension with plated millings
eagle $ps_parameters $target_directory/pdf/27_board_millings_plated_mil.ps $board_name milling document > /dev/null

echo

echo -n "- outline ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_outline.oln" $board_name dimension > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Outline/Millings Non-Plated  " $board_name_short"_outline.oln" >> $content_file
# make a ps file of this layer # no need, outline alread defined in other ps files
echo

echo "- documentation"

echo -n "- dimensions, measures, document ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_documentation.dcm" $board_name dimension measures document > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Documentation                " $board_name_short"_documentation.dcm" >> $content_file
# make a ps file of this layer
# processing layer 144 for drill legend not required any more
eagle $ps_parameters $target_directory/pdf/29_board_documentation_dcm.ps $board_name dimension measures document > /dev/null
echo

echo -n "- dimension, tplace, tvalues, tdoc, document"
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_values_top.tav" $board_name dimension tplace tvalues tdoc document > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Values Top                   " $board_name_short"_values_top.tav" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/30_board_values_top_tav.ps $board_name dimension tplace tvalues tdoc document > /dev/null

echo

echo -n "- dimension, bplace, bvalues, bdoc, document"
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_values_bot.bav" $board_name dimension bplace bvalues bdoc document > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Values Bottom                " $board_name_short"_values_bot.bav" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/31_board_values_bot_mirrored_bav.ps $board_name dimension bplace bvalues bdoc document > /dev/null

echo

echo -n "- dimension, tplace, torigins, tnames, tdoc, document ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_documentation_top.tdc" $board_name dimension tplace tnames tdoc document > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Documentation Top            " $board_name_short"_documentation_top.tdc" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/32_board_values_documentation_top_tdc.ps $board_name dimension tplace tnames tdoc document > /dev/null

echo

echo -n "- dimension, bplace, borigin, bnames, bdoc, document ..."
eagle -X -d $gerber_format -o $target_directory/$cam_dir/$board_name_short"_documentation_bot.bdc" $board_name dimension bplace bnames bdoc document > /dev/null

file_count=$[file_count+1] # count CAM files
# update legend
echo "Documentation Bottom         " $board_name_short"_documentation_bot.bdc" >> $content_file
# make a ps file of this layer
eagle $ps_parameters $target_directory/pdf/33_board_values_documentation_bot_mirrored_bdc.ps $board_name dimension bplace bnames bdoc document > /dev/null

echo

echo >> $content_file
echo "-------------------------------------------------------------------------------" >> $content_file
echo "File Count Total: "$file_count >> $content_file

#merge all *.ps files into one singe pdf file -> temp.pdf
ps_files=`ls $target_directory/pdf/*.ps`
gs -q -dBATCH -dAutoFilterColorImages=false -sColorImageFilter=FlateEncode -dNOPAUSE -sPAPERSIZE=a4 -sDEVICE=pdfwrite -sOutputFile=$target_directory/pdf/temp.pdf ${ps_files}

cp $target_directory/pdf/temp.pdf $target_directory/pdf/$board_name.pdf


# clean up
rm $target_directory/pdf/temp.pdf
rm $target_directory/pdf/*.ps
rm $target_directory/$cam_dir/*.gpi	# remove gpi files, not used by manufacturer
rm $target_directory/$cam_dir/*.dri	# remove dri files, not used by manufacturer

echo "- netlist ..."
mkdir $target_directory/NET_PART_LIST
eagle "-C edit .s1; export netlist $target_directory/NET_PART_LIST/$board_name_short"_netlist".txt; quit;" $board_name_short.brd

echo "- pick & place ..."
eagle "-C edit .s1; board; export partlist $target_directory/NET_PART_LIST/$board_name_short"_pick_place".txt; quit;" $board_name_short.brd


echo "- BOM ..."
mkdir $target_directory/BOM
# Export the BOM that contains the device attributes. 
# NOTE: Replace the bom.ulp on your machine by the one provided at 
# https://github.com/Blunk-electronic/lbr_eagle/blob/master/ulp/bom.ulp
eagle "-C edit .s1; run bom.ulp; quit;" $board_name_short.sch
# Move the BOM file to the CAM archive:
mv $board_name_short.csv $target_directory/BOM/$board_name_short"_attributes.csv"

# Here we copy the bom file that has been generated by stock_manager into 
# the target directory. If it does not exist in the required directory, this step is skipped.
bom_by_stock_manager=bom/$board_name_short"_bom.csv"
# echo "bom by stock_manager " $bom_by_stock_manager
[ -e $bom_by_stock_manager ] && 
	{
	cp $bom_by_stock_manager $target_directory/BOM/
	
	}
[ ! -e $bom_by_stock_manager ] && 
	{
	echo "WARNING !" $bom_by_stock_manager "does not exist !"
	}

	
# CS: This works well with Eagle version 7.7.0 but not with 9.5.x -> fix required
# echo "- IDF ..."
# mkdir $target_directory/IDF
# Export the IDF. NOTE: The ulp export-idf.ulp must exist on your machine.
# Download it from https://github.com/Blunk-electronic/lbr_eagle/blob/master/ulp/export-idf.ulp
# CS: Currently the exporter asks the operator for some parameters such as board thickness.
#     In the future these parameters should be extracted from the board automatically.
# eagle "-C edit .s1; board; run export-idf.ulp; quit;" $board_name_short.brd
# mv $board_name_short.em? $target_directory/IDF/
	
echo "- IPC-D-365 ..."
mkdir $target_directory/IPC-D-356
# Export the IPC netlist. NOTE: The ulp export-ipc-d-356.ulp must exist on your machine.
# Download it from https://github.com/Blunk-electronic/lbr_eagle/blob/master/ulp/export-ipc-d-356.ulp
eagle "-C edit .s1; board; run export-ipc-d-356.ulp; quit;" $board_name_short.brd
mv $board_name_short.ipc $target_directory/IPC-D-356
	
echo "- FABMASTER ..."
mkdir $target_directory/fabmaster
# Export fabmaster data. NOTE: The ulp export-fabmaster.ulp must exist on your machine.
# Download it from https://github.com/Blunk-electronic/lbr_eagle/blob/master/ulp/export-fabmaster.ulp
# WARNING: Read instructions in export-fabmaster.ulp !!
eagle "-C edit .s1; board; run export-fabmaster.ulp; quit;" $board_name_short.brd
mv $board_name_short.fab $target_directory/fabmaster
	
echo "- zipping ..."
# zip board gerber and drill data	
target_directory=$(echo "CAD_CAM/"$board_name_short"_"$make_date)
target_zip_file=$target_directory/$board_name_short"_CAM_"$make_date.zip
zip -r $target_zip_file $target_directory/CAM

#--------------------------------------------------------------------------

echo "- design files ..."

# build name of target directory
target_directory=$(echo "CAD_CAM/"$board_name_short"_"$make_date)

# extend target directory by CAD
target_directory=$target_directory"/CAD"
mkdir $target_directory


# make sub directory for design files
mkdir $target_directory/design_eagle


# make sub directory for pdf files
mkdir $target_directory/pdf

target_pdf=$target_directory/pdf/$board_name_short"_schematic.pdf"

echo "- brd & schematic ..."
cp $board_name $target_directory/design_eagle/
cp $schematic_name $target_directory/design_eagle/
#eagle "-C PRINT -s 1.07 BLACK -1 -ROTATE LANDSCAPE PAPER a4 -CAPTION SHEETS all FILE $target_pdf; quit;" $board_name_short.sch 

# Use this command with V7.7:
#eagle "-C PRINT -s 1.07 BLACK -1 -ROTATE LANDSCAPE PAPER a4 -CAPTION SHEETS all FILE $target_pdf; quit;" $board_name_short.sch
# Use this command with other version (V9.x ?)
# in v7.5 for some reason we also have to mirror the schematic with option -m  So use the follwing line in v7.5 
#eagle "-C PRINT -m -s 1.07 BLACK -1 -ROTATE LANDSCAPE PAPER a4 -CAPTION SHEETS all FILE $target_pdf; quit;" $board_name_short.brd
eagle $board_name_short.brd "-C PRINT -s 1.07 BLACK -1 -ROTATE LANDSCAPE PAPER a4 -CAPTION SHEETS all FILE $target_pdf; quit;"


echo "- net & part list ..."
eagle "-C export netlist $target_directory/design_eagle/$board_name_short"_netlist".txt; quit;" $board_name_short.brd
# For some reason, the partlist (for pick and place) must be exported from the schematic (seems to be a bug).
#eagle "-C export partlist $target_directory/design_eagle/$board_name_short"_partlist".txt; quit;" $board_name_short.sch
eagle "-C export partlist $target_directory/design_eagle/$board_name_short"_partlist".txt; quit;" $board_name_short.brd

echo "- zipping .."
target_directory=$(echo "CAD_CAM/"$board_name_short"_"$make_date)
target_zip_file=$target_directory/$board_name_short"_CAD_"$make_date.zip
zip -r $target_zip_file $target_directory/CAD

echo "... done"

exit;
